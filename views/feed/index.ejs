<% layout('layouts/_layout') %>

<section>
  <h2>Welcome to our internal social network, <%= `${user.fullName?.split(' ')[0] || ''}` %></h2>
  <!-- Search + Filters -->
  <form
    id="feed-search-form"
    method="GET"
    action="<%= (typeof searchAction !== 'undefined' && searchAction) ? searchAction : '' %>"
    class="feed-search"
    style="display:grid;gap:8px;margin:12px 0 6px;"
  >
    <input type="hidden" name="_csrf" value="<%= typeof csrfToken !== 'undefined' ? csrfToken : '' %>">
    <input type="hidden" name="page"  value="<%= typeof page !== 'undefined' ? page : 1 %>"/>
    <input type="hidden" name="limit" value="<%= typeof limit !== 'undefined' ? limit : 15 %>"/>

    <!-- ROW 1: Search box + Search button -->
    <div class="search-row" style="display:flex;align-items:center;gap:8px;flex-wrap:wrap; margin-bottom: 1px;">
      <input
        type="text"
        name="q"
        list="search-suggestions"
        placeholder="Search posts…"
        value="<%= (filters && filters.q) ? filters.q : '' %>"
        class="search-input"
      />
      <% if (Array.isArray(recentSearches) && recentSearches.length) { %>
        <datalist id="search-suggestions">
          <% recentSearches.forEach(function(s){ %>
            <option value="<%= s %>"></option>
          <% }) %>
        </datalist>
      <% } %>
      <button class="btn" type="submit">Search</button>
    </div>
  </form>

  <!-- ✏️ Post Composer (only if logged in) -->
  <% if (user) { %>
    <%- include('../partials/_post_form', {
      company,
      groupId: (typeof group !== 'undefined' && group) ? group._id : null,
      currentUser: user,
      csrfToken
    }) %>
  <% } %>
  
  <!-- Results + Posts -->
  <% if (!posts || posts.length === 0) { %>
    <div class="empty">No posts found. Try a different query.</div>
  <% } %>

  <div class="feed-grid">
    <% (posts || []).forEach(function(post){ %>
      <%- include('../partials/_post_card', { company, user, post, compact: true }) %>
    <% }) %>
  </div>
</section>

<script>
(function () {
  const ORG = "<%= company.slug %>";
  const CSRF = document.querySelector('meta[name="csrf-token"]')?.content || '';
  const form = document.getElementById('feed-search-form');

  /* =====================================================
     1) REACTIONS
  ===================================================== */
  document.addEventListener('click', async (e) => {
    const btn = e.target.closest('[data-react]');
    if (!btn) return;
    const bar = btn.closest('[data-react-scope]');
    if (!bar) return;

    const type = btn.getAttribute('data-react');
    const targetType = bar.getAttribute('data-target-type');
    const targetId = bar.getAttribute('data-target-id');
    if (!targetType || !targetId) return;

    try {
      const resp = await fetch(`/${ORG}/api/reactions`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'CSRF-Token': CSRF
        },
        body: JSON.stringify({ targetType, targetId, reactionType: type, _csrf: CSRF })
      });
      const data = await resp.json();
      if (!data.ok) return alert(data.error || 'Could not react.');

      const spans = {
        LIKE: bar.querySelector('[data-rc="LIKE"]'),
        HEART: bar.querySelector('[data-rc="HEART"]'),
        CELEBRATE: bar.querySelector('[data-rc="CELEBRATE"]'),
        SUPPORT: bar.querySelector('[data-rc="SUPPORT"]'),
        LAUGH: bar.querySelector('[data-rc="LAUGH"]'),
        INSIGHTFUL: bar.querySelector('[data-rc="INSIGHTFUL"]'),
        THANKS: bar.querySelector('[data-rc="THANKS"]')
      };
      const bump = (el, d) => { if (el) el.textContent = Math.max(0, (parseInt(el.textContent || '0', 10) + d)); };

      if (data.added) {
        bump(spans[data.added], +1);
        bar.querySelectorAll('[data-react].active')?.forEach(b => b.classList.remove('active'));
        bar.querySelector(`[data-react="${data.added}"]`)?.classList.add('active');
      }
      if (data.removed) {
        bump(spans[data.removed], -1);
        bar.querySelectorAll('[data-react].active')?.forEach(b => b.classList.remove('active'));
      }
      if (data.changedTo) {
        if (data.prevType && data.prevType !== data.changedTo) bump(spans[data.prevType], -1);
        bump(spans[data.changedTo], +1);
        bar.querySelectorAll('[data-react].active')?.forEach(b => b.classList.remove('active'));
        bar.querySelector(`[data-react="${data.changedTo}"]`)?.classList.add('active');
      }

      const totalEl = bar.querySelector('[data-total-reactions]');
      if (totalEl) {
        const total = Array.from(bar.querySelectorAll('.rc'))
          .reduce((n, s) => n + parseInt(s.textContent || '0', 10), 0);
        totalEl.textContent = String(total);
      }
    } catch (err) {
      console.error('Reaction error', err);
    }
  });


  /* =====================================================
     2) DELETE POST
  ===================================================== */
  document.addEventListener('click', async (e) => {
    const btn = e.target.closest('[data-delete-post]');
    if (!btn) return;
    if (!confirm('Delete this post?')) return;
    const postId = btn.getAttribute('data-delete-post');
    try {
      const resp = await fetch(`/${ORG}/api/posts/${postId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'CSRF-Token': CSRF
        },
        body: JSON.stringify({ _csrf: CSRF })
      });
      if (resp.ok) window.location.reload();
      else alert('Could not delete post.');
    } catch (err) {
      console.error('Delete error', err);
    }
  });


  /* =====================================================
     3) REPORTING
  ===================================================== */
  document.addEventListener('click', async (e) => {
    const btn = e.target.closest('[data-report]');
    if (!btn) return;
    const targetType = btn.getAttribute('data-report');
    const targetId = btn.getAttribute('data-target-id');
    const reason = prompt('Reason for reporting this content?');
    if (!reason) return;
    try {
      const resp = await fetch(`/${ORG}/api/reports`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'CSRF-Token': CSRF
        },
        body: JSON.stringify({ targetType, targetId, reason, _csrf: CSRF })
      });
      if (!resp.ok) alert('Failed to report.');
      else alert('Reported. Moderators will review soon.');
    } catch (err) {
      console.error('Report error', err);
    }
  });

  /* =====================================================
     5) SAVED SEARCHES
  ===================================================== */
  const scope = "<%= (typeof group !== 'undefined' && group) ? 'GROUP' : 'COMPANY' %>";
  const groupId = "<%= (typeof group !== 'undefined' && group) ? String(group._id) : '' %>";
  const listEl = document.getElementById('saved-searches-list');
  const saveBtn = document.getElementById('btn-save-search');

  function buildQuery(params) {
    const qp = new URLSearchParams();
    if (params.q) qp.set('q', params.q);
    if (params.type) qp.set('type', params.type);
    if (params.authorId) qp.set('authorId', params.authorId);
    if (params.people) qp.set('people', params.people);
    if (params.from) qp.set('from', params.from);
    if (params.to) qp.set('to', params.to);
    if (params.myGroups) qp.set('myGroups', '1');
    qp.set('page', '1');
    qp.set('limit', '<%= typeof limit !== "undefined" ? String(limit) : "15" %>');
    return qp.toString();
  }

  async function loadSaved() {
    try {
      const qs = new URLSearchParams({ scope, ...(scope === 'GROUP' ? { groupId } : {}) });
      const resp = await fetch(`/${ORG}/saved-searches?` + qs.toString(), { headers: { 'Accept': 'application/json' } });
      const data = await resp.json();
      if (!data.ok) return;
      renderList(data.items || []);
    } catch (e) { console.error(e); }
  }

  function renderList(items) {
    if (!listEl) return;
    listEl.innerHTML = '';
    items.forEach(item => {
      const a = document.createElement('a');
      a.href = `<%= (typeof searchAction !== 'undefined' && searchAction) ? searchAction : '' %>?` + buildQuery({
        q: item.q, type: item.type, authorId: item.authorId, people: item.people,
        from: item.fromDate ? new Date(item.fromDate).toISOString().slice(0, 10) : '',
        to: item.toDate ? new Date(item.toDate).toISOString().slice(0, 10) : '',
        myGroups: !!item.myGroups
      });
      a.textContent = (item.pinned ? '📌 ' : '') + item.name;
      a.className = 'btn';
      a.style.background = '#f4f4f6';
      a.style.border = '1px solid #e7e7ea';
      a.style.color = '#333';

      const wrap = document.createElement('span');
      wrap.style.display = 'inline-flex';
      wrap.style.alignItems = 'center';
      wrap.style.gap = '4px';
      wrap.appendChild(a);

      const pin = document.createElement('button');
      pin.type = 'button';
      pin.textContent = item.pinned ? 'Unpin' : 'Pin';
      pin.className = 'btn';
      pin.style.padding = '4px 8px';
      pin.addEventListener('click', async (ev) => {
        ev.preventDefault();
        await fetch(`/${ORG}/saved-searches/${item._id}/pin`, {
          method: 'POST',
          headers: { 'Accept': 'application/json', 'CSRF-Token': CSRF },
          body: JSON.stringify({ _csrf: CSRF })
        });
        loadSaved();
      });
      wrap.appendChild(pin);

      const del = document.createElement('button');
      del.type = 'button';
      del.textContent = 'Delete';
      del.className = 'btn';
      del.style.padding = '4px 8px';
      del.addEventListener('click', async (ev) => {
        ev.preventDefault();
        if (!confirm(`Delete saved search "${item.name}"?`)) return;
        await fetch(`/${ORG}/saved-searches/${item._id}`, {
          method: 'DELETE',
          headers: { 'Accept': 'application/json', 'CSRF-Token': CSRF },
          body: JSON.stringify({ _csrf: CSRF })
        });
        loadSaved();
      });
      wrap.appendChild(del);

      listEl.appendChild(wrap);
    });
  }

  async function saveCurrent() {
    if (!form) return;
    const q = form.querySelector('input[name="q"]')?.value || '';
    const type = form.querySelector('select[name="type"]')?.value || '';
    const authorId = form.querySelector('input[name="authorId"]')?.value || '';
    const people = form.querySelector('input[name="people"]')?.value || '';
    const from = form.querySelector('input[name="from"]')?.value || '';
    const to = form.querySelector('input[name="to"]')?.value || '';
    const myGroups = !!form.querySelector('input[name="myGroups"]')?.checked;

    const name = prompt('Name this saved search:', [q, people, type].filter(Boolean).join(' • ').slice(0, 40) || 'Untitled');
    if (!name) return;

    const body = {
      name, q, type, scope, groupId: groupId || null,
      authorId: authorId || null,
      people, fromDate: from || null, toDate: to || null, myGroups,
      _csrf: CSRF
    };

    await fetch(`/${ORG}/saved-searches`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'CSRF-Token': CSRF
      },
      body: JSON.stringify(body)
    });
    loadSaved();
  }

  if (saveBtn) saveBtn.addEventListener('click', saveCurrent);
  loadSaved();


  /* =====================================================
     6) TYPE + SEARCH INPUT (auto-submit)
  ===================================================== */
  const typeSel = document.getElementById('type-select');
  const qInput = form?.querySelector('input[name="q"]');
  if (typeSel && form) {
    typeSel.addEventListener('change', () => {
      const pageH = form.querySelector('input[name="page"]');
      if (pageH) pageH.value = '1';
      form.submit();
    });
  }

  if (qInput && form) {
    let t = null;
    const submitDebounced = () => {
      const pageH = form.querySelector('input[name="page"]');
      if (pageH) pageH.value = '1';
      form.requestSubmit ? form.requestSubmit() : form.submit();
    };
    qInput.addEventListener('input', () => {
      clearTimeout(t);
      t = setTimeout(submitDebounced, 450);
    });
  }


  /* =====================================================
     7) FILTERS BADGE SYNC
  ===================================================== */
  const adv = document.getElementById('adv-filters');
  const badge = document.getElementById('filters-count');
  function countActiveAdvanced(fObj) {
    let n = 0;
    if (fObj.type) n++; if (fObj.authorId) n++; if (fObj.people) n++;
    if (fObj.from) n++; if (fObj.to) n++; if (fObj.myGroups) n++;
    return n;
  }
  function syncFiltersBadge() {
    if (!form) return;
    const fObj = {
      type: form.querySelector('select[name="type"]')?.value || '',
      authorId: form.querySelector('input[name="authorId"]')?.value || '',
      people: form.querySelector('input[name="people"]')?.value || '',
      from: form.querySelector('input[name="from"]')?.value || '',
      to: form.querySelector('input[name="to"]')?.value || '',
      myGroups: form.querySelector('input[name="myGroups"]')?.checked || false
    };
    const n = countActiveAdvanced(fObj);
    if (badge) badge.textContent = n ? n : '';
    const panel = document.getElementById('advanced-row');
    if (n && adv && !adv.hasAttribute('open')) {
      adv.setAttribute('open', '');
    }
  }
  syncFiltersBadge();
  form?.addEventListener('change', (e) => {
    if (e.target.closest('#advanced-row')) syncFiltersBadge();
  });
})();
</script>
