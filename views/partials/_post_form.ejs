<!-- views/partials/_post_form.ejs -->
<form method="POST" action="/<%= company.slug %>/posts" enctype="multipart/form-data" class="composer-card" id="composerForm" novalidate>
  <input type="hidden" name="_csrf" value="<%= typeof csrfToken !== 'undefined' ? csrfToken : '' %>">
  <input type="hidden" name="type" id="postTypeSel" value="TEXT">

  <% if (typeof groupId !== 'undefined' && groupId) { %>
    <input type="hidden" name="groupId" value="<%= groupId %>">
  <% } %>

  <!-- Header: avatar + hint -->
  <div class="composer-head">
    <img class="composer-avatar" src="<%= (currentUser?.avatarUrl || '/img/avatar.png') %>" alt="">
    <div class="composer-head-meta">
      <div class="composer-hint">
        <%= currentUser ? `What's on your mind, ${currentUser.fullName?.split(' ')[0] || ''}?` : 'Start a post' %>
      </div>
    </div>
  </div>

  <!-- Textarea -->
  <textarea name="content"
          rows="1"
          class="composer-input js-mention"
          data-mention-source="/<%= company.slug %>/posts/mentions"
          placeholder="Write something‚Ä¶ (paste a link to show a preview)"></textarea>

  </div>

  <!-- Inline Previews -->
  <div class="composer-previews">
    <!-- Link preview -->
    <div id="linkPreview" class="link-preview d-none" aria-live="polite">
      <div class="lp-body">
        <div class="lp-text">
          <div class="lp-title">Link</div>
          <div class="lp-url" id="lpUrl"></div>
        </div>
        <button class="lp-remove" type="button" id="removeLinkPreview" title="Remove link">√ó</button>
      </div>
      <input type="hidden" name="linkUrl" id="linkUrlHidden">
    </div>

    <!-- Media preview -->
    <div id="mediaPreview" class="media-preview d-none">
      <img id="mediaImg" alt="" class="media-thumb d-none"/>
      <video id="mediaVideo" class="media-thumb d-none" playsinline controls></video>
      <button type="button" class="media-remove" id="removeMediaPreview" title="Remove file">√ó</button>
    </div>
  </div>

  <!-- Type tabs -->
  <div class="composer-types" style="display:flex;gap:6px;flex-wrap:wrap;margin:8px 0;">
    <button type="button" class="btn tsel" data-type="TEXT">Text</button>
    <button type="button" class="btn tsel" data-type="LINK">Link</button>
    <button type="button" class="btn tsel" data-type="IMAGE">Image</button>
    <button type="button" class="btn tsel" data-type="POLL">Poll</button>
    <button type="button" class="btn tsel" data-type="ANNOUNCEMENT">Announcement</button>
  </div>

  <!-- Poll builder -->
  <div id="pollBuilder" class="d-none" style="border:1px solid #eee;border-radius:8px;padding:10px;">
    <input type="text" name="poll[title]" class="input" placeholder="Poll title (optional)" style="margin-bottom:8px;max-width:520px;">
    <div id="pb-qs"></div>
    <div style="display:flex;gap:8px;margin-top:8px;">
      <button type="button" class="btn" id="pb-add-q">+ Add question</button>
      <span class="fineprint">Up to 10 questions; each with 2‚Äì10 options.</span>
    </div>
  </div>

  <!-- Announcement options -->
  <div id="announceRow" class="d-none" style="margin:8px 0;">
    <label style="display:flex;align-items:center;gap:8px;">
      <input type="checkbox" name="isPinned" value="true">
      <span>Pin to top</span>
    </label>
    <div class="fineprint">Only moderators/admins can actually pin; server enforces it.</div>
  </div>


  <hr class="composer-sep"/>

  <!-- Actions -->
  <div class="composer-actions">
    <label class="composer-action" title="Photo/Video">
      <span class="icon" aria-hidden="true">üñºÔ∏è</span><span>Photo/Video</span>
      <input id="composerFile" type="file" name="image" accept="image/*,video/*" hidden>
    </label>

    <button type="button" class="composer-action" data-action="LINK" title="Share a link">
      <span class="icon" aria-hidden="true">üîó</span><span>Link</span>
    </button>

    <div class="spacer"></div>

    <button class="btn" type="submit" id="postBtn" disabled>Post</button>
  </div>

  <!-- Hidden helper row for IMAGE -->
  <div id="imageRow" class="d-none" style="margin-top:.6rem;">
    <div class="fineprint">JPG/PNG/GIF/MP4 ‚Ä¢ up to 2 MB (images) / 10 MB (video)</div>
    <input type="text" name="imageAlt" class="input" placeholder="Describe the image (alt text, optional)" style="margin-top:.4rem;">
  </div>
</form>

<script>
(function(){
  const form      = document.getElementById('composerForm');
  const textarea  = form.querySelector('.composer-input');
  const typeSel   = document.getElementById('postTypeSel');
  const fileInp   = document.getElementById('composerFile');
  const postBtn   = document.getElementById('postBtn');
  const imageRow  = document.getElementById('imageRow');
  const pollBuilder = document.getElementById('pollBuilder');
  const announceRow = document.getElementById('announceRow');
  const pbQs = document.getElementById('pb-qs');
  const addQ = document.getElementById('pb-add-q');

  // Link preview nodes
  const linkPreview = document.getElementById('linkPreview');
  const lpUrl       = document.getElementById('lpUrl');
  const linkUrlHidden = document.getElementById('linkUrlHidden');
  const removeLinkPreview = document.getElementById('removeLinkPreview');

  // Media preview nodes
  const mediaPreview = document.getElementById('mediaPreview');
  const mediaImg     = document.getElementById('mediaImg');
  const mediaVideo   = document.getElementById('mediaVideo');
  const removeMediaPreview = document.getElementById('removeMediaPreview');

  // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
  // Helpers
  // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
  function setType(t){
    typeSel.value = t;
    linkPreview.classList.toggle('d-none', t !== 'LINK' || !linkUrlHidden.value);
    imageRow.classList.toggle('d-none', t !== 'IMAGE');
    pollBuilder.classList.toggle('d-none', t !== 'POLL');
    announceRow.classList.toggle('d-none', t !== 'ANNOUNCEMENT');
  }

  function autoGrow(el){
    el.style.height = 'auto';
    el.style.height = Math.min(el.scrollHeight, 320) + 'px';
  }

  function firstUrlFromText(text){
    const m = text.match(/https?:\/\/[^\s]+/i);
    return m ? m[0] : '';
  }

  function enableIfHasContent(){
    const hasText = (textarea.value || '').trim().length > 0;
    const hasMedia = !!(fileInp.files && fileInp.files.length);
    const hasLink = !!(linkUrlHidden.value);
    postBtn.disabled = !(hasText || hasMedia || hasLink);
    const hasPoll = (typeSel.value === 'POLL') && (pbQs.querySelectorAll('.pb-q').length > 0);
    const hasAnnouncement = (typeSel.value === 'ANNOUNCEMENT') && hasText;
    postBtn.disabled = !(hasText || hasMedia || hasLink || hasPoll || hasAnnouncement);
  }

  function resetMediaPreview(){
    mediaImg.src = '';
    mediaVideo.removeAttribute('src');
    mediaImg.classList.add('d-none');
    mediaVideo.classList.add('d-none');
    mediaPreview.classList.add('d-none');
    if (fileInp) fileInp.value = '';
    if (typeSel.value === 'IMAGE') setType('TEXT');
  }

  function resetLinkPreview(){
    linkUrlHidden.value = '';
    lpUrl.textContent = '';
    linkPreview.classList.add('d-none');
    if (typeSel.value === 'LINK') setType('TEXT');
  }

  // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
  // Textarea auto-expand + link detect
  // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
  autoGrow(textarea);
  textarea.addEventListener('input', () => {
    autoGrow(textarea);
    const found = firstUrlFromText(textarea.value);
    if (found && !fileInp.files.length) {
      // only show link preview if not in IMAGE mode
      linkUrlHidden.value = found;
      lpUrl.textContent = found;
      setType('LINK');
    } else if (!found && typeSel.value === 'LINK') {
      resetLinkPreview();
      setType('TEXT');
    }
    enableIfHasContent();
  });

  // Action button ‚Üí LINK (puts focus and hints user to paste)
  form.querySelectorAll('.composer-action[data-action="LINK"]').forEach(btn => {
    btn.addEventListener('click', () => {
      setType('LINK');
      textarea.focus();
      // if a URL already exists in text, show it
      const found = firstUrlFromText(textarea.value);
      if (found) {
        linkUrlHidden.value = found;
        lpUrl.textContent = found;
        linkPreview.classList.remove('d-none');
      }
      enableIfHasContent();
    });
  });

  removeLinkPreview.addEventListener('click', () => {
    resetLinkPreview();
    enableIfHasContent();
  });

  // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
  // File picker ‚Üí media preview (Image/Video)
  // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
  fileInp.addEventListener('click', () => setType('IMAGE'));

  fileInp.addEventListener('change', () => {
    if (!(fileInp.files && fileInp.files.length)) {
      resetMediaPreview();
      enableIfHasContent();
      return;
    }

    const f = fileInp.files[0];
    const isImage = /^image\//i.test(f.type);
    const isVideo = /^video\//i.test(f.type);

    // Size guard: 2MB image, 10MB video
    if (isImage && f.size > 2 * 1024 * 1024) {
      alert('Images up to 2 MB only.');
      resetMediaPreview();
      return;
    }
    if (isVideo && f.size > 10 * 1024 * 1024) {
      alert('Videos up to 10 MB only.');
      resetMediaPreview();
      return;
    }

    // Switching away from link preview if any
    resetLinkPreview();

    const url = URL.createObjectURL(f);
    mediaPreview.classList.remove('d-none');

    if (isImage) {
      mediaImg.src = url;
      mediaImg.classList.remove('d-none');
      mediaVideo.classList.add('d-none');
    } else if (isVideo) {
      mediaVideo.src = url;
      mediaVideo.classList.remove('d-none');
      mediaImg.classList.add('d-none');
    } else {
      alert('Unsupported file type.');
      resetMediaPreview();
      return;
    }

    setType('IMAGE');
    enableIfHasContent();
  });

  removeMediaPreview.addEventListener('click', () => {
    resetMediaPreview();
    enableIfHasContent();
  });

  // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
  // Submit handling
  // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
  form.addEventListener('submit', () => {
    postBtn.disabled = true;
    postBtn.textContent = 'Posting‚Ä¶';
  });

  // Type tab clicks
  form.querySelectorAll('.tsel').forEach(btn => {
    btn.addEventListener('click', () => {
      const t = btn.getAttribute('data-type');
      setType(t);
      if (t === 'POLL' && !pbQs.querySelector('.pb-q')) pbQs.appendChild(renderQuestion(0, null));
      enableIfHasContent();
    });
  });

  // Poll builder helpers
  function qName(i, inner){ return `poll[questions][${i}]` + (inner ? `[${inner}]` : ''); }
  function optName(i, j){ return `poll[questions][${i}][options][${j}]`; }
  function renderQuestion(i, data){
    const wrap = document.createElement('div');
    wrap.className = 'pb-q';
    wrap.style = 'border:1px dashed #ddd;border-radius:8px;padding:8px;margin:8px 0;';
    wrap.innerHTML = `
      <div style="display:flex;justify-content:space-between;align-items:center;gap:8px;">
        <div style="font-weight:600;">Question ${i+1}</div>
        <div>
          <label style="font-size:12px;">
            <input type="checkbox" name="${qName(i,'multiSelect')}" ${data?.multiSelect ? 'checked':''}>
            Multiple answers allowed
          </label>
          <button type="button" class="btn" data-del-q>Remove</button>
        </div>
      </div>
      <input type="text" name="${qName(i,'text')}" class="input" placeholder="Question text" value="${(data?.text||'').replace(/"/g,'&quot;')}" style="margin:6px 0;max-width:520px;">
      <div class="pb-opts"></div>
      <button type="button" class="btn" data-add-opt>+ Add option</button>
    `;
    const optsWrap = wrap.querySelector('.pb-opts');
    const addOptBtn = wrap.querySelector('[data-add-opt]');
    const delQBtn = wrap.querySelector('[data-del-q]');
    function renderOpt(j, label){
      const row = document.createElement('div');
      row.className = 'pb-opt';
      row.style = 'display:flex;gap:6px;align-items:center;margin:4px 0;';
      row.innerHTML = `
        <input type="text" class="input" name="${optName(i,j)}[label]" placeholder="Option ${j+1}"
               value="${(label||'').replace(/"/g,'&quot;')}" style="max-width:420px;">
        <button type="button" class="btn" data-del-opt title="Remove option">√ó</button>
      `;
      row.querySelector('[data-del-opt]').addEventListener('click', () => {
        row.remove(); renumberOptions(); enableIfHasContent();
      });
      optsWrap.appendChild(row);
    }
    function renumberOptions(){
      Array.from(optsWrap.querySelectorAll('.pb-opt')).forEach((row, j) => {
        const inp = row.querySelector('input[type="text"]');
        inp.name = `${optName(i,j)}[label]`;
      });
    }
    addOptBtn.addEventListener('click', () => {
      const count = optsWrap.querySelectorAll('.pb-opt').length;
      if (count >= 10) { alert('Max 10 options per question.'); return; }
      renderOpt(count, '');
      enableIfHasContent();
    });
    delQBtn.addEventListener('click', () => {
      wrap.remove(); renumberQuestions(); enableIfHasContent();
    });
    const seed = Array.isArray(data?.options) && data.options.length ? data.options.map(o=>o.label) : ['',''];
    seed.forEach((lbl, j) => renderOpt(j, lbl||''));
    return wrap;
  }
  function renumberQuestions(){
    const qs = Array.from(pbQs.querySelectorAll('.pb-q'));
    qs.forEach((qEl, i) => {
      const data = {
        text: qEl.querySelector(`input[name$="[text]"]`)?.value || '',
        multiSelect: qEl.querySelector(`input[name$="[multiSelect]"]`)?.checked || false,
        options: Array.from(qEl.querySelectorAll('.pb-opt input')).map(inp => ({ label: inp.value }))
      };
      const fresh = renderQuestion(i, data);
      qEl.replaceWith(fresh);
    });
  }
  addQ && addQ.addEventListener('click', () => {
    const count = pbQs.querySelectorAll('.pb-q').length;
    if (count >= 10) { alert('Max 10 questions per poll.'); return; }
    pbQs.appendChild(renderQuestion(count, null));
    enableIfHasContent();
  });

  // Initial
  setType('TEXT');
  enableIfHasContent();

    // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
  // @mention autocomplete (textarea-based)
  // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
  (function setupMentions(){
    const src = textarea.dataset.mentionSource;
    if (!src) return;

    // inline dropdown
    const menu = document.createElement('div');
    menu.className = 'mention-menu';
    Object.assign(menu.style, {
      position:'absolute', zIndex:9999, minWidth:'220px', maxHeight:'240px',
      overflowY:'auto', border:'1px solid #ddd', background:'#fff',
      boxShadow:'0 6px 18px rgba(0,0,0,0.08)', borderRadius:'8px', padding:'6px 0'
    });
    menu.hidden = true;
    document.body.appendChild(menu);

    function positionMenu() {
      const r = textarea.getBoundingClientRect();
      menu.style.left = (window.scrollX + r.left) + 'px';
      menu.style.top  = (window.scrollY + r.bottom + 6) + 'px';
      menu.style.width = r.width + 'px';
    }
    function open(){ positionMenu(); menu.hidden = false; }
    function close(){ menu.hidden = true; }

    function caretInfo(el){ return { pos: el.selectionStart, value: el.value }; }
    function trigger(val, pos){
      const left = val.slice(0, pos);
      const at = left.lastIndexOf('@');
      if (at === -1) return null;
      const token = left.slice(at + 1);
      if (/\s/.test(token)) return null; // space/newline ended token
      return { start: at, query: token };
    }

    function render(users, onPick){
      menu.innerHTML = '';
      users.forEach(u => {
        const row = document.createElement('div');
        row.style.cssText = 'padding:8px 12px;display:grid;grid-template-columns:28px 1fr;gap:8px;cursor:pointer;';
        row.addEventListener('mouseenter', () => {
          Array.from(menu.children).forEach(c => c.style.background = '');
          row.style.background = '#f6f8fa';
        });
        row.addEventListener('mousedown', (e) => { e.preventDefault(); onPick(u); });

        const avatar = document.createElement('div');
        Object.assign(avatar.style, {width:'28px',height:'28px',borderRadius:'50%',background:'#eee'});
        if (u.avatarUrl) avatar.style.background = `center/cover no-repeat url(${u.avatarUrl})`;

        const text = document.createElement('div');
        text.innerHTML = `<div style="font-size:14px;"><strong>${u.fullName}</strong>${u.handle ? ' ¬∑ @'+u.handle : ''}</div>
                          <div style="font-size:12px;color:#666;">${u.subtitle || u.email}</div>`;

        row.appendChild(avatar); row.appendChild(text);
        menu.appendChild(row);
      });
      menu.hidden = users.length === 0;
    }

    function insert(u, trig){
      const { value, pos } = caretInfo(textarea);
      const before = value.slice(0, trig.start);
      const after  = value.slice(pos);
      const token  = u.handle ? '@' + u.handle : '@' + u.fullName;
      textarea.value = before + token + ' ' + after;
      const newPos = (before + token + ' ').length;
      textarea.setSelectionRange(newPos, newPos);
      textarea.focus();
      close();
      textarea.dispatchEvent(new Event('input', { bubbles: true }));
    }

    let lastQ = '', timer = null;
    window.addEventListener('resize', () => { if (!menu.hidden) positionMenu(); });
    textarea.addEventListener('blur', () => setTimeout(close, 120));

    textarea.addEventListener('keyup', () => {
      const { value, pos } = caretInfo(textarea);
      const t = trigger(value, pos);
      if (!t || t.query.length < 1) { close(); return; }

      if (t.query === lastQ) return;
      lastQ = t.query;
      clearTimeout(timer);
      timer = setTimeout(async () => {
        try {
          const r = await fetch(`${src}?q=` + encodeURIComponent(t.query), { headers: { 'Accept':'application/json' }});
          const j = await r.json();
          const users = (j && j.ok) ? j.users : [];
          render(users, u => insert(u, t));
          if (users.length) open(); else close();
        } catch { close(); }
      }, 120);
    });
  })();

})();
</script>
